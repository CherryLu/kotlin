/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.cfg;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/cfg-variables")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class DataFlowTestGenerated extends AbstractDataFlowTest {
    public void testAllFilesPresentInCfg_variables() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("compiler/testData/cfg-variables/basic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Basic extends AbstractDataFlowTest {
        public void testAllFilesPresentInBasic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/basic"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ExhaustiveInitialization.kt")
        public void testExhaustiveInitialization() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/ExhaustiveInitialization.kt");
            doTest(fileName);
        }

        @TestMetadata("IfWithUninitialized.kt")
        public void testIfWithUninitialized() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/IfWithUninitialized.kt");
            doTest(fileName);
        }

        @TestMetadata("InitializedNotDeclared.kt")
        public void testInitializedNotDeclared() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/InitializedNotDeclared.kt");
            doTest(fileName);
        }

        @TestMetadata("UsageInFunctionLiteral.kt")
        public void testUsageInFunctionLiteral() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/UsageInFunctionLiteral.kt");
            doTest(fileName);
        }

        @TestMetadata("UseUninitializedInLambda.kt")
        public void testUseUninitializedInLambda() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/UseUninitializedInLambda.kt");
            doTest(fileName);
        }

        @TestMetadata("VariablesInitialization.kt")
        public void testVariablesInitialization() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/VariablesInitialization.kt");
            doTest(fileName);
        }

        @TestMetadata("VariablesUsage.kt")
        public void testVariablesUsage() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/basic/VariablesUsage.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/cfg-variables/bugs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Bugs extends AbstractDataFlowTest {
        public void testAllFilesPresentInBugs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/bugs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("doWhileAssignment.kt")
        public void testDoWhileAssignment() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/doWhileAssignment.kt");
            doTest(fileName);
        }

        @TestMetadata("doWhileNotDefined.kt")
        public void testDoWhileNotDefined() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/doWhileNotDefined.kt");
            doTest(fileName);
        }

        @TestMetadata("initializationInLocalClass.kt")
        public void testInitializationInLocalClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/initializationInLocalClass.kt");
            doTest(fileName);
        }

        @TestMetadata("kt10243.kt")
        public void testKt10243() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/kt10243.kt");
            doTest(fileName);
        }

        @TestMetadata("kt4764.kt")
        public void testKt4764() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/kt4764.kt");
            doTest(fileName);
        }

        @TestMetadata("kt5469.kt")
        public void testKt5469() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/kt5469.kt");
            doTest(fileName);
        }

        @TestMetadata("kt9825.kt")
        public void testKt9825() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/kt9825.kt");
            doTest(fileName);
        }

        @TestMetadata("localObjectInConstructor.kt")
        public void testLocalObjectInConstructor() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/localObjectInConstructor.kt");
            doTest(fileName);
        }

        @TestMetadata("referenceToPropertyInitializer.kt")
        public void testReferenceToPropertyInitializer() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/referenceToPropertyInitializer.kt");
            doTest(fileName);
        }

        @TestMetadata("varInitializationInIf.kt")
        public void testVarInitializationInIf() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/varInitializationInIf.kt");
            doTest(fileName);
        }

        @TestMetadata("varInitializationInIfInCycle.kt")
        public void testVarInitializationInIfInCycle() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/bugs/varInitializationInIfInCycle.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/cfg-variables/effects")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Effects extends AbstractDataFlowTest {
        public void testAllFilesPresentInEffects() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/cfg-variables/effects/controlflow")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Controlflow extends AbstractDataFlowTest {
            public void testAllFilesPresentInControlflow() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects/controlflow"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/testData/cfg-variables/effects/controlflow/flowInlining")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class FlowInlining extends AbstractDataFlowTest {
                public void testAllFilesPresentInFlowInlining() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects/controlflow/flowInlining"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("expressionBody.kt")
                public void testExpressionBody() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/flowInlining/expressionBody.kt");
                    doTest(fileName);
                }

                @TestMetadata("implicitCastToAnyInReturnType.kt")
                public void testImplicitCastToAnyInReturnType() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/flowInlining/implicitCastToAnyInReturnType.kt");
                    doTest(fileName);
                }

                @TestMetadata("nonLocalReturn.kt")
                public void testNonLocalReturn() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/flowInlining/nonLocalReturn.kt");
                    doTest(fileName);
                }

                @TestMetadata("typeMismatch.kt")
                public void testTypeMismatch() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/flowInlining/typeMismatch.kt");
                    doTest(fileName);
                }

                @TestMetadata("unreachableCode.kt")
                public void testUnreachableCode() throws Exception {
                    String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/flowInlining/unreachableCode.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Initialization extends AbstractDataFlowTest {
                public void testAllFilesPresentInInitialization() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects/controlflow/initialization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/atLeastOnce")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class AtLeastOnce extends AbstractDataFlowTest {
                    public void testAllFilesPresentInAtLeastOnce() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects/controlflow/initialization/atLeastOnce"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("valDefiniteReassignment.kt")
                    public void testValDefiniteReassignment() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/atLeastOnce/valDefiniteReassignment.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("varDefiniteInitialization.kt")
                    public void testVarDefiniteInitialization() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/atLeastOnce/varDefiniteInitialization.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("varIndefiniteIntialization.kt")
                    public void testVarIndefiniteIntialization() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/atLeastOnce/varIndefiniteIntialization.kt");
                        doTest(fileName);
                    }
                }

                @TestMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class ExactlyOnce extends AbstractDataFlowTest {
                    public void testAllFilesPresentInExactlyOnce() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("valDefiniteInitialization.kt")
                    public void testValDefiniteInitialization() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce/valDefiniteInitialization.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("valDefiniteReassignment.kt")
                    public void testValDefiniteReassignment() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce/valDefiniteReassignment.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("valIndefiniteInitialization.kt")
                    public void testValIndefiniteInitialization() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce/valIndefiniteInitialization.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("varDefiniteInitalization.kt")
                    public void testVarDefiniteInitalization() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce/varDefiniteInitalization.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("varIndefiniteInitialization.kt")
                    public void testVarIndefiniteInitialization() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce/varIndefiniteInitialization.kt");
                        doTest(fileName);
                    }

                    @TestMetadata("withReceiver.kt")
                    public void testWithReceiver() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/exactlyOnce/withReceiver.kt");
                        doTest(fileName);
                    }
                }

                @TestMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/unknown")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Unknown extends AbstractDataFlowTest {
                    public void testAllFilesPresentInUnknown() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/effects/controlflow/initialization/unknown"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("unknownInvocations.kt")
                    public void testUnknownInvocations() throws Exception {
                        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/effects/controlflow/initialization/unknown/unknownInvocations.kt");
                        doTest(fileName);
                    }
                }
            }
        }
    }

    @TestMetadata("compiler/testData/cfg-variables/lexicalScopes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class LexicalScopes extends AbstractDataFlowTest {
        public void testAllFilesPresentInLexicalScopes() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/cfg-variables/lexicalScopes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("doWhileScope.kt")
        public void testDoWhileScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/doWhileScope.kt");
            doTest(fileName);
        }

        @TestMetadata("forScope.kt")
        public void testForScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/forScope.kt");
            doTest(fileName);
        }

        @TestMetadata("functionLiteralScope.kt")
        public void testFunctionLiteralScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/functionLiteralScope.kt");
            doTest(fileName);
        }

        @TestMetadata("ifScope.kt")
        public void testIfScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/ifScope.kt");
            doTest(fileName);
        }

        @TestMetadata("localClass.kt")
        public void testLocalClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/localClass.kt");
            doTest(fileName);
        }

        @TestMetadata("localFunctionScope.kt")
        public void testLocalFunctionScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/localFunctionScope.kt");
            doTest(fileName);
        }

        @TestMetadata("localFunctionScopeWithoutBody.kt")
        public void testLocalFunctionScopeWithoutBody() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/localFunctionScopeWithoutBody.kt");
            doTest(fileName);
        }

        @TestMetadata("localObject.kt")
        public void testLocalObject() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/localObject.kt");
            doTest(fileName);
        }

        @TestMetadata("objectLiteralScope.kt")
        public void testObjectLiteralScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/objectLiteralScope.kt");
            doTest(fileName);
        }

        @TestMetadata("propertyAccessorScope.kt")
        public void testPropertyAccessorScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/propertyAccessorScope.kt");
            doTest(fileName);
        }

        @TestMetadata("tryScope.kt")
        public void testTryScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/tryScope.kt");
            doTest(fileName);
        }

        @TestMetadata("whileScope.kt")
        public void testWhileScope() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/cfg-variables/lexicalScopes/whileScope.kt");
            doTest(fileName);
        }
    }
}
